#!/bin/bash
set -ex

if [ -z "$CERT_API_CN" ] || [ -z "$CERT_STORAGE_CN" ] ; then
    echo "Environment variables CERT_API_CN and CERT_STORAGE_CN need to be set."
    echo "Example: CERT_API_CN="docker.mender.io" CERT_STORAGE_CN="s3.docker.mender.io" $0"
    exit 1
fi

CERT_VALID_DAYS="3650"

command -v openssl >/dev/null 2>&1 || { echo >&2 "Please install the openssl utility to generate keys."; exit 1; }

KEYDIR=keys-generated

mkdir $KEYDIR
cd $KEYDIR


# generate web certs and keys

mkdir api-gateway storage-proxy

cd api-gateway
#openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -newkey rsa:3072 -keyout private.pem -out certificate.pem -subj /CN=$CERT_API_CN
openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -newkey ec:<(openssl ecparam -name prime256v1) -keyout private.pem -out certificate.pem -subj /CN=$CERT_API_CN
#openssl ec -in private.pem -out private.pem
#openssl ecparam -name prime256v1 > ecparam.txt
#cat ecparam.txt private-noparam.pem > private.pem

#openssl ecparam -out private.pem -name prime256v1 -genkey
#openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -key private.pem -out certificate.pem -subj /CN=$CERT_API_CN
cd ..

cd storage-proxy
#openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -newkey rsa:3072 -keyout private.pem -out certificate.pem -subj /CN=$CERT_STORAGE_CN
openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -newkey ec:<(openssl ecparam -name prime256v1) -keyout private.pem -out certificate.pem -subj /CN=$CERT_API_CN
#openssl ecparam -out private.pem -name prime256v1 -genkey
#openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -key private.pem -out certificate.pem -subj /CN=$CERT_API_CN
cd ..

#openssl ecparam -out private.pem -name prime256v1 -genkey
#openssl req -x509 -sha256 -nodes -days $CERT_VALID_DAYS -key private.pem -out certificate.pem -subj /CN=$CERT_API_CN

# openssl ecparam -name secp256k1 -genkey -param_enc explicit -out private-key.pem  # or prime256v1
# openssl req -new -x509 -key private-key.pem -out server.pem -days 730 -subj /CN=docker.mender.io


# generate keys for signing JSON Web Tokens

for DIR in deviceauth useradm
do
  mkdir $DIR
  cd $DIR
  openssl genpkey -algorithm RSA -out private.pem -pkeyopt rsa_keygen_bits:3072
  #openssl ecparam -name secp256k1 -genkey -noout -out secp256k1-key.pem

  # convert to RSA private key format, otherwise services complain:"
  # level=fatal msg="failed to read rsa private key: jwt: can't open key - not an rsa private key" file=proc.go func=runtime.main line=183
  openssl rsa -in private.pem -out private.pem
  cd ..
done

echo "All keys and certificates have been generated in directory $KEYDIR."
echo "Please include them in your docker compose and device builds."
echo "For more information please see https://docs.mender.io/Administration/Certificates-and-keys."
